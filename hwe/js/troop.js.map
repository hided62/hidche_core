{"version":3,"file":"troop.js","mappings":"mBA4SO,SAASA,IACZC,MAAM,eC1SwBC,MD4HlCC,OAAOC,UAAUC,OAAS,WAA6B,2BAAhBC,EAAgB,yBAAhBA,EAAgB,gBACnD,OAAOC,KAAKC,QAAQ,YAAY,SAAUC,EAAOC,GAC7C,YAA+B,IAAhBJ,EAAKI,GAA0BJ,EAAKI,GAAUD,ME/HrEE,QAAO,SAASC,GAEZA,EAAE,kBAAkBC,OAAM,SAASC,GAC/B,QAAIC,QAAQ,sBAGZH,EAAEI,KAAK,CACHC,IAAI,cACJC,SAAS,OACTC,KAAK,CACDC,OAAO,UAEZC,MAAK,SAASF,GACbG,QAAQC,IAAIJ,GACRA,EAAKK,SACLvB,MAAMkB,EAAKM,QACXC,SAASC,UAGbD,SAASC,WAEV3B,IACI,MAGXY,EAAE,mBAAmBC,OAAM,SAASC,GAkBhC,OAjBAF,EAAEI,KAAK,CACHC,IAAI,cACJC,SAAS,OACTC,KAAK,CACDC,OAAO,OACPQ,KAAKhB,EAAE,cAAciB,SAE1BR,MAAK,SAASF,GACbG,QAAQC,IAAIJ,GACRA,EAAKK,SACLvB,MAAMkB,EAAKM,QACXC,SAASC,UAGbD,SAASC,WAEV3B,IACI,KAGXY,EAAE,uBAAuBC,OAAM,SAASC,GAkBpC,OAjBAF,EAAEI,KAAK,CACHC,IAAI,cACJC,SAAS,OACTC,KAAK,CACDC,OAAO,OACPQ,KAAKhB,EAAE,cAAciB,SAE1BR,MAAK,SAASF,GACbG,QAAQC,IAAIJ,GACRA,EAAKK,SACLvB,MAAMkB,EAAKM,QACXC,SAASC,UAGbD,SAASC,WAEV3B,IACI,KAGXY,EAAE,iBAAiBC,OAAM,SAASC,GAkB9B,OAjBAF,EAAEI,KAAK,CACHC,IAAI,cACJC,SAAS,OACTC,KAAK,CACDC,OAAO,OACPU,IAAIlB,EAAE,UAAUiB,SAErBR,MAAK,SAASF,GACbG,QAAQC,IAAIJ,GACRA,EAAKK,SACLvB,MAAMkB,EAAKM,QACXC,SAASC,UAGbD,SAASC,WAEV3B,IACI,KAGXY,EAAE,iBAAiBC,OAAM,SAASC,GAkB9B,OAjBAF,EAAEI,KAAK,CACHC,IAAI,cACJC,SAAS,OACTC,KAAK,CACDC,OAAO,OACPW,MAAMnB,EAAE,oBAAoBiB,SAEjCR,MAAK,SAASF,GACbG,QAAQC,IAAIJ,GACRA,EAAKK,SACLvB,MAAMkB,EAAKM,QACXC,SAASC,UAGbD,SAASC,WAEV3B,IACI,S","sources":["webpack://hidche_lib/./hwe/ts/common_legacy.ts","webpack://hidche_lib/./hwe/ts/util.ts","webpack://hidche_lib/./hwe/ts/troop.ts"],"sourcesContent":["import { unwrap } from \"./util\";\n\ndeclare const jQuery: JQueryStatic;\n\n\n/** \n * <>& 등을 html에서도 그대로 보이도록 escape주는 함수\n * @see https://stackoverflow.com/questions/24816/escaping-html-strings-with-jquery\n */\nexport const escapeHtml = (() => {\n    const entityMap: { [v: string]: string } = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#39;',\n        '/': '&#x2F;',\n        '`': '&#x60;',\n        '=': '&#x3D;'\n    };\n\n    return function (string: string) {\n        return String(string).replace(/[&<>\"'`=/]/g, function (s: string) {\n            return entityMap[s];\n        });\n    }\n})();\n\n/**\n * 변수가 정수인지 확인하는 함수\n * @param {*} n 정수인지 확인하기 위한 인자\n * @return {boolean} 정수인지 여부\n */\nexport function isInt(n: unknown): n is number {\n    const v = n as number;\n    return +v === v && !(v % 1);\n}\n\n\n//https://gist.github.com/demouth/3217440\n/**\n * mb_strwidth\n * @see http://php.net/manual/function.mb-strwidth.php\n */\nexport function mb_strwidth(str: string): number {\n    const l = str.length;\n    let length = 0;\n    for (let i = 0; i < l; i++) {\n        const c = str.charCodeAt(i);\n        if (0x0000 <= c && c <= 0x0019) {\n            length += 0;\n        } else if (0x0020 <= c && c <= 0x1FFF) {\n            length += 1;\n        } else if (0x2000 <= c && c <= 0xFF60) {\n            length += 2;\n        } else if (0xFF61 <= c && c <= 0xFF9F) {\n            length += 1;\n        } else if (0xFFA0 <= c) {\n            length += 2;\n        }\n    }\n    return length;\n}\n\n\n/**\n * mb_strimwidth\n * @param String\n * @param int\n * @param int\n * @param String\n * @return String\n * @see http://www.php.net/manual/function.mb-strimwidth.php\n */\nexport function mb_strimwidth(str: string, start: number, width: number, trimmarker = ''): string {\n    const trimmakerWidth = mb_strwidth(trimmarker);\n    const l = str.length;\n    let trimmedLength = 0;\n    const trimmedStr: string[] = [];\n    for (let i = start; i < l; i++) {\n        const c = str.charAt(i);\n        const charWidth = mb_strwidth(c);\n        const next = str.charAt(i + 1);\n        const nextWidth = mb_strwidth(next);\n\n        trimmedLength += charWidth;\n        trimmedStr.push(c);\n        if (trimmedLength + trimmakerWidth + nextWidth > width) {\n            trimmedStr.push(trimmarker);\n            break;\n        }\n    }\n    return trimmedStr.join('');\n}\n\n/**\n * object의 array를 id를 key로 삼는 object로 재 변환\n */\nexport function convertDictById<K extends string | number, T extends { id: K }>(arr: ArrayLike<T>): Record<K, T> {\n    const result: Record<string | number, T> = {};\n    for (const v of Object.values(arr)) {\n        result[v.id] = v;\n    }\n    return result;\n}\n\n/**\n * array를 set 형태의 object로 변환\n */\nexport function convertSet<K extends string | number>(arr: ArrayLike<K>): Record<K, true> {\n    const result: Record<string | number, true> = {};\n    for (const v of Object.values(arr)) {\n        result[v] = true;\n    }\n    return result;\n}\n\n\n/** \n * {0}, {1}, {2}형태로 포맷해주는 함수\n */\n\ndeclare global {\n    interface String {\n        format(...args: string[]): string;\n    }\n}\nString.prototype.format = function (...args: string[]) {\n    return this.replace(/{(\\d+)}/g, function (match, number) {\n        return (typeof args[number] != 'undefined') ? args[number] : match;\n    });\n};\n\n\nexport function hexToRgb(hex: string): { r: number, g: number, b: number } | null {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n}\n\nexport function isBrightColor(color: string): boolean {\n    const cv = unwrap(hexToRgb(color));\n    if ((cv.r * 0.299 + cv.g * 0.587 + cv.b * 0.114) > 140) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * 게임내에서 지원하는 color type만 선택할 수 있도록 해주는 함수\n * @param {string} color #AAAAAA 또는 AAAAAA 형태로 작성된 RGB hex color string\n * @returns {string}\n */\nexport function convColorValue(color: string): string {\n    if (color.charAt(0) == '#') {\n        color = color.substr(1);\n    }\n    color = color.toUpperCase();\n\n    const colorBase = new Set([\n        '000080', '0000FF', '008000', '008080', '00BFFF', '00FF00', '00FFFF', '20B2AA',\n        '2E8B57', '483D8B', '6495ED', '7B68EE', '7CFC00', '7FFFD4', '800000', '800080',\n        '808000', '87CEEB', 'A0522D', 'A9A9A9', 'AFEEEE', 'BA55D3', 'E0FFFF', 'F5F5DC',\n        'FF0000', 'FF00FF', 'FF6347', 'FFA500', 'FFC0CB', 'FFD700', 'FFDAB9', 'FFFF00',\n        'FFFFFF'\n    ]);\n\n    if (!colorBase.has(color)) {\n        return '000000';\n    }\n\n    return color;\n}\n\n\nexport function numberWithCommas(x: number): string {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\n//linkify가 불러와 있어야함\ndeclare global {\n    interface Window {\n        linkifyStr: (v: string, k?: Record<string, string | number>) => string;\n    }\n}\nexport function linkifyStrWithOpt(text: string): string {\n    return window.linkifyStr(text, {});\n}\n\n/**\n * 단순한 Template 함수.  <%변수명%>으로 template 가능\n * @see  https://github.com/krasimir/absurd/blob/master/lib/processors/html/helpers/TemplateEngine.js\n * @param {string} html \n * @param {object} options \n * @returns {string}\n */\nexport function TemplateEngine(html: string, options: Record<string | number, unknown> = {}): string {\n    const re = /<%(.+?)%>/g;\n    const reExp = /(^( )?(var|if|for|else|switch|case|break|{|}|;))(.*)?/g;\n    let cursor = 0;\n    const add = function (line: string, js?: boolean) {\n        js ? (code += line.match(reExp) ? line + '\\n' : 'r.push(' + line + ');\\n') :\n            (code += line != '' ? 'r.push(\"' + line.replace(/\"/g, '\\\\\"') + '\");\\n' : '');\n        return add;\n    }\n    options.e = escapeHtml;\n    options.linkifyStr = linkifyStrWithOpt;\n    for (; ;) {\n        const match = re.exec(html);\n        if (!match) {\n            break;\n        }\n        add(html.slice(cursor, match.index))(match[1], true);\n        cursor = match.index + match[0].length;\n    }\n    add(html.substr(cursor, html.length - cursor));\n\n    let code = 'with(obj) { var r=[];\\n';\n    code = (code + 'return r.join(\"\"); }').replace(/[\\r\\t\\n]/g, ' ');\n    try {\n        return new Function('obj', code).apply(options, [options]);\n    } catch (err) {\n        console.error(\"'\" + err.message + \"'\", \" in \\n\\nCode:\\n\", code, \"\\n\");\n        throw err;\n    }\n}\n\nexport function getIconPath(imgsvr: boolean | 1 | 0, picture: string): string {\n    // ../d_shared/common_path.js 필요\n    if (!imgsvr) {\n        return window.pathConfig.sharedIcon + '/' + picture;\n    } else {\n        return window.pathConfig.root + '/d_pic/' + picture;\n    }\n}\n\nexport function activeFlip($obj?: JQuery<HTMLElement>): void {\n    let $result: JQuery<HTMLElement>;\n    if ($obj === undefined) {\n        $result = $('img[data-flip]');\n    } else {\n        $result = $obj.find('img[data-flip]');\n    }\n\n    $result.each(function () {\n        activeFlipItem($(this));\n    });\n\n}\n\nexport function combineObject<K extends string, V>(item: V[], columnList: K[]): Record<K, V> {\n    const newItem: Record<string, V> = {};\n    for (const columnIdx in columnList) {\n        const columnName = columnList[columnIdx];\n        newItem[columnName] = item[columnIdx];\n    }\n    return newItem;\n}\n\nexport function combineArray<K extends string, V>(array: V[][], columnList: K[]): Record<K, V>[] {\n    const result: Record<K, V>[] = [];\n    for (const key of array.keys()) {\n        const item = array[key];\n        result[key] = combineObject(item, columnList);\n    }\n    return result;\n}\n\nexport function activeFlipItem($img: JQuery<HTMLElement>): void {\n    const imageList = [];\n    imageList.push($img.attr('src'));\n    $.each($img.data('flip').split(','), function (idx, value) {\n        value = $.trim(value);\n        if (!value) {\n            return true;\n        }\n        imageList.push(value);\n    });\n    if (imageList.length <= 1) {\n        return;\n    }\n    $img.data('computed_flip_array', imageList);\n    $img.data('computed_flip_idx', 0);\n\n    $img.click(function () {\n        const arr = $img.data('computed_flip_array');\n        let idx = $img.data('computed_flip_idx');\n        idx = (idx + 1) % (arr.length);\n        $img.attr('src', arr[idx]);\n        $img.data('computed_flip_idx', idx);\n    });\n    $img.css('cursor', 'pointer');\n}\n\n\n\nexport function errUnknown(): void {\n    alert('작업을 실패했습니다.');\n}\n\n\n\nexport function errUnknownToast(): void {\n    jQuery.toast({\n        title: '에러!',\n        content: '작업을 실패했습니다.',\n        type: 'danger',\n        delay: 5000\n    });\n}\n\nexport function quickReject<T>(errMsg: string): JQuery.Promise<T> {\n    if (errMsg === undefined) {\n        errMsg = '작업을 실패했습니다.';\n    }\n    const deferred = $.Deferred();\n    void deferred.reject(errMsg);\n    return deferred.promise();\n}\n\nexport function nl2br(text: string): string {\n    return text.replace(/\\n/g, \"<br>\");\n}\n/*\nfunction br2nl (text) {   \n    return text.replace(/<\\s*\\/?br\\s*[\\/]?>/gi, '\\n');\n}\n*/\n\nexport function getNpcColor(npcType: number): 'cyan' | 'skyblue' | null {\n    if (npcType >= 2) {\n        return 'cyan';\n    }\n    if (npcType == 1) {\n        return 'skyblue';\n    }\n    return null;\n}\n\nexport function initTooltip($obj?: JQuery<HTMLElement>): void {\n    if ($obj === undefined) {\n        $obj = $('.obj_tooltip');\n    } else if (!$obj.hasClass('obj_tooltip')) {\n        $obj = $obj.find('.obj_tooltip');\n    }\n    console.log($obj);\n\n    $obj.each(function () {\n        const $target = $(this);\n\n        if ($target.data('installHandler')) {\n            return;\n        }\n        $target.data('installHandler', true);\n\n        $target.mouseover(function () {\n            const $objTooltip = $(this);\n            if ($objTooltip.data('setObjTooltip')) {\n                return;\n            }\n\n            let tooltipClassText = $objTooltip.data('tooltip-class');\n            if (!tooltipClassText) {\n                tooltipClassText = '';\n            }\n            const template = '<div class=\"tooltip {0}\" role=\"tooltip\"><div class=\"arrow\"></div><div class=\"tooltip-inner\"></div></div>'\n                .format(tooltipClassText);\n\n            $objTooltip.tooltip({\n                title: function () {\n                    return $.trim($(this).find('.tooltiptext').html());\n                },\n                template: template,\n                html: true\n            }).tooltip('show');\n\n            $objTooltip.data('setObjTooltip', true);\n        });\n    });\n}","type ErrType<T> = { new(msg?: string): T }\ntype Nullable<T> = T | null | undefined\n\nexport class RuntimeError extends Error {\n    public name = 'RuntimeError';\n    constructor(public message: string = '') {\n        super(message);\n    }\n    toString(): string {\n        if (this.message) {\n            return this.name + ': ' + this.message;\n        }\n        else {\n            return this.name;\n        }\n    }\n}\n\nexport class NotNullExpected extends RuntimeError {\n    public name = 'NotNullExpected';\n}\n\nexport function unwrap<T>(result: Nullable<T>): T {\n    if (result === null || result === undefined) {\n        throw new NotNullExpected();\n    }\n    return result;\n}\n\nexport function unwrap_err<T, ErrT extends Error>(result: Nullable<T>, errType: ErrType<ErrT>, errMsg?: string): T {\n    if (result === null || result === undefined) {\n        throw new errType(errMsg);\n    }\n    return result;\n}","import { errUnknown } from \"./common_legacy\";\n\njQuery(function($){\n    //btnJoinTroop, btnLeaveTroop, btnKickTroop, btnCreateTroop, btnChangeTroopName\n    $('#btnLeaveTroop').click(function(e){\n        if(!confirm(\"정말 부대를 탈퇴하시겠습니까?\")){\n            return false;\n        }\n        $.post({\n            url:'j_troop.php',\n            dataType:'json',\n            data:{\n                action:'부대탈퇴'\n            }\n        }).then(function(data){\n            console.log(data);\n            if(!data.result){\n                alert(data.reason);\n                location.reload();\n            }\n    \n            location.reload();\n    \n        }, errUnknown);\n        return false;\n    });\n\n    $('#btnCreateTroop').click(function(e){\n        $.post({\n            url:'j_troop.php',\n            dataType:'json',\n            data:{\n                action:'부대창설',\n                name:$('#nameplate').val()\n            }\n        }).then(function(data){\n            console.log(data);\n            if(!data.result){\n                alert(data.reason);\n                location.reload();\n            }\n    \n            location.reload();\n    \n        }, errUnknown);\n        return false;\n    });\n\n    $('#btnChangeTroopName').click(function(e){\n        $.post({\n            url:'j_troop.php',\n            dataType:'json',\n            data:{\n                action:'부대변경',\n                name:$('#nameplate').val()\n            }\n        }).then(function(data){\n            console.log(data);\n            if(!data.result){\n                alert(data.reason);\n                location.reload();\n            }\n    \n            location.reload();\n    \n        }, errUnknown);\n        return false;\n    });\n\n    $('#btnKickTroop').click(function(e){\n        $.post({\n            url:'j_troop.php',\n            dataType:'json',\n            data:{\n                action:'부대추방',\n                gen:$('#genNo').val()\n            }\n        }).then(function(data){\n            console.log(data);\n            if(!data.result){\n                alert(data.reason);\n                location.reload();\n            }\n    \n            location.reload();\n    \n        }, errUnknown);\n        return false;\n    });\n\n    $('#btnJoinTroop').click(function(e){\n        $.post({\n            url:'j_troop.php',\n            dataType:'json',\n            data:{\n                action:'부대가입',\n                troop:$('.troopId:checked').val()\n            }\n        }).then(function(data){\n            console.log(data);\n            if(!data.result){\n                alert(data.reason);\n                location.reload();\n            }\n    \n            location.reload();\n    \n        }, errUnknown);\n        return false;\n    });\n\n    \n});"],"names":["errUnknown","alert","Error","String","prototype","format","args","this","replace","match","number","jQuery","$","click","e","confirm","post","url","dataType","data","action","then","console","log","result","reason","location","reload","name","val","gen","troop"],"sourceRoot":""}