{"version":3,"file":"common.js","mappings":"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","sources":["webpack://hidche_lib/./hwe/ts/util.ts","webpack://hidche_lib/./hwe/ts/common_legacy.ts"],"sourcesContent":["type ErrType<T> = { new(msg?: string): T }\ntype Nullable<T> = T | null | undefined\n\nexport class RuntimeError extends Error {\n    public name = 'RuntimeError';\n    constructor(public message: string = '') {\n        super(message);\n    }\n    toString(): string {\n        if (this.message) {\n            return this.name + ': ' + this.message;\n        }\n        else {\n            return this.name;\n        }\n    }\n}\n\nexport class NotNullExpected extends RuntimeError {\n    public name = 'NotNullExpected';\n}\n\nexport function unwrap<T>(result: Nullable<T>): T {\n    if (result === null || result === undefined) {\n        throw new NotNullExpected();\n    }\n    return result;\n}\n\nexport function unwrap_err<T, ErrT extends Error>(result: Nullable<T>, errType: ErrType<ErrT>, errMsg?: string): T {\n    if (result === null || result === undefined) {\n        throw new errType(errMsg);\n    }\n    return result;\n}","import { unwrap } from \"./util\";\n\ndeclare const jQuery: JQueryStatic;\n\n\n/** \n * <>& 등을 html에서도 그대로 보이도록 escape주는 함수\n * @see https://stackoverflow.com/questions/24816/escaping-html-strings-with-jquery\n */\nexport const escapeHtml = (() => {\n    const entityMap: { [v: string]: string } = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#39;',\n        '/': '&#x2F;',\n        '`': '&#x60;',\n        '=': '&#x3D;'\n    };\n\n    return function (string: string) {\n        return String(string).replace(/[&<>\"'`=/]/g, function (s: string) {\n            return entityMap[s];\n        });\n    }\n})();\n\n/**\n * 변수가 정수인지 확인하는 함수\n * @param {*} n 정수인지 확인하기 위한 인자\n * @return {boolean} 정수인지 여부\n */\nexport function isInt(n: unknown): n is number {\n    const v = n as number;\n    return +v === v && !(v % 1);\n}\n\n\n//https://gist.github.com/demouth/3217440\n/**\n * mb_strwidth\n * @see http://php.net/manual/function.mb-strwidth.php\n */\nexport function mb_strwidth(str: string): number {\n    const l = str.length;\n    let length = 0;\n    for (let i = 0; i < l; i++) {\n        const c = str.charCodeAt(i);\n        if (0x0000 <= c && c <= 0x0019) {\n            length += 0;\n        } else if (0x0020 <= c && c <= 0x1FFF) {\n            length += 1;\n        } else if (0x2000 <= c && c <= 0xFF60) {\n            length += 2;\n        } else if (0xFF61 <= c && c <= 0xFF9F) {\n            length += 1;\n        } else if (0xFFA0 <= c) {\n            length += 2;\n        }\n    }\n    return length;\n}\n\n\n/**\n * mb_strimwidth\n * @param String\n * @param int\n * @param int\n * @param String\n * @return String\n * @see http://www.php.net/manual/function.mb-strimwidth.php\n */\nexport function mb_strimwidth(str: string, start: number, width: number, trimmarker = ''): string {\n    const trimmakerWidth = mb_strwidth(trimmarker);\n    const l = str.length;\n    let trimmedLength = 0;\n    const trimmedStr: string[] = [];\n    for (let i = start; i < l; i++) {\n        const c = str.charAt(i);\n        const charWidth = mb_strwidth(c);\n        const next = str.charAt(i + 1);\n        const nextWidth = mb_strwidth(next);\n\n        trimmedLength += charWidth;\n        trimmedStr.push(c);\n        if (trimmedLength + trimmakerWidth + nextWidth > width) {\n            trimmedStr.push(trimmarker);\n            break;\n        }\n    }\n    return trimmedStr.join('');\n}\n\n/**\n * object의 array를 id를 key로 삼는 object로 재 변환\n */\nexport function convertDictById<K extends string | number, T extends { id: K }>(arr: ArrayLike<T>): Record<K, T> {\n    const result: Record<string | number, T> = {};\n    for (const v of Object.values(arr)) {\n        result[v.id] = v;\n    }\n    return result;\n}\n\n/**\n * array를 set 형태의 object로 변환\n */\nexport function convertSet<K extends string | number>(arr: ArrayLike<K>): Record<K, true> {\n    const result: Record<string | number, true> = {};\n    for (const v of Object.values(arr)) {\n        result[v] = true;\n    }\n    return result;\n}\n\n\n/** \n * {0}, {1}, {2}형태로 포맷해주는 함수\n */\n\ndeclare global {\n    interface String {\n        format(...args: string[]): string;\n    }\n}\nString.prototype.format = function (...args: string[]) {\n    return this.replace(/{(\\d+)}/g, function (match, number) {\n        return (typeof args[number] != 'undefined') ? args[number] : match;\n    });\n};\n\n\nexport function hexToRgb(hex: string): { r: number, g: number, b: number } | null {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n}\n\nexport function isBrightColor(color: string): boolean {\n    const cv = unwrap(hexToRgb(color));\n    if ((cv.r * 0.299 + cv.g * 0.587 + cv.b * 0.114) > 140) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * 게임내에서 지원하는 color type만 선택할 수 있도록 해주는 함수\n * @param {string} color #AAAAAA 또는 AAAAAA 형태로 작성된 RGB hex color string\n * @returns {string}\n */\nexport function convColorValue(color: string): string {\n    if (color.charAt(0) == '#') {\n        color = color.substr(1);\n    }\n    color = color.toUpperCase();\n\n    const colorBase = new Set([\n        '000080', '0000FF', '008000', '008080', '00BFFF', '00FF00', '00FFFF', '20B2AA',\n        '2E8B57', '483D8B', '6495ED', '7B68EE', '7CFC00', '7FFFD4', '800000', '800080',\n        '808000', '87CEEB', 'A0522D', 'A9A9A9', 'AFEEEE', 'BA55D3', 'E0FFFF', 'F5F5DC',\n        'FF0000', 'FF00FF', 'FF6347', 'FFA500', 'FFC0CB', 'FFD700', 'FFDAB9', 'FFFF00',\n        'FFFFFF'\n    ]);\n\n    if (!colorBase.has(color)) {\n        return '000000';\n    }\n\n    return color;\n}\n\n\nexport function numberWithCommas(x: number): string {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\n//linkify가 불러와 있어야함\ndeclare global {\n    interface Window {\n        linkifyStr: (v: string, k?: Record<string, string | number>) => string;\n    }\n}\nexport function linkifyStrWithOpt(text: string): string {\n    return window.linkifyStr(text, {});\n}\n\n/**\n * 단순한 Template 함수.  <%변수명%>으로 template 가능\n * @see  https://github.com/krasimir/absurd/blob/master/lib/processors/html/helpers/TemplateEngine.js\n * @param {string} html \n * @param {object} options \n * @returns {string}\n */\nexport function TemplateEngine(html: string, options: Record<string | number, unknown> = {}): string {\n    const re = /<%(.+?)%>/g;\n    const reExp = /(^( )?(var|if|for|else|switch|case|break|{|}|;))(.*)?/g;\n    let cursor = 0;\n    const add = function (line: string, js?: boolean) {\n        js ? (code += line.match(reExp) ? line + '\\n' : 'r.push(' + line + ');\\n') :\n            (code += line != '' ? 'r.push(\"' + line.replace(/\"/g, '\\\\\"') + '\");\\n' : '');\n        return add;\n    }\n    options.e = escapeHtml;\n    options.linkifyStr = linkifyStrWithOpt;\n    for (; ;) {\n        const match = re.exec(html);\n        if (!match) {\n            break;\n        }\n        add(html.slice(cursor, match.index))(match[1], true);\n        cursor = match.index + match[0].length;\n    }\n    add(html.substr(cursor, html.length - cursor));\n\n    let code = 'with(obj) { var r=[];\\n';\n    code = (code + 'return r.join(\"\"); }').replace(/[\\r\\t\\n]/g, ' ');\n    try {\n        return new Function('obj', code).apply(options, [options]);\n    } catch (err) {\n        console.error(\"'\" + err.message + \"'\", \" in \\n\\nCode:\\n\", code, \"\\n\");\n        throw err;\n    }\n}\n\nexport function getIconPath(imgsvr: boolean | 1 | 0, picture: string): string {\n    // ../d_shared/common_path.js 필요\n    if (!imgsvr) {\n        return window.pathConfig.sharedIcon + '/' + picture;\n    } else {\n        return window.pathConfig.root + '/d_pic/' + picture;\n    }\n}\n\nexport function activeFlip($obj?: JQuery<HTMLElement>): void {\n    let $result: JQuery<HTMLElement>;\n    if ($obj === undefined) {\n        $result = $('img[data-flip]');\n    } else {\n        $result = $obj.find('img[data-flip]');\n    }\n\n    $result.each(function () {\n        activeFlipItem($(this));\n    });\n\n}\n\nexport function combineObject<K extends string, V>(item: V[], columnList: K[]): Record<K, V> {\n    const newItem: Record<string, V> = {};\n    for (const columnIdx in columnList) {\n        const columnName = columnList[columnIdx];\n        newItem[columnName] = item[columnIdx];\n    }\n    return newItem;\n}\n\nexport function combineArray<K extends string, V>(array: V[][], columnList: K[]): Record<K, V>[] {\n    const result: Record<K, V>[] = [];\n    for (const key of array.keys()) {\n        const item = array[key];\n        result[key] = combineObject(item, columnList);\n    }\n    return result;\n}\n\nexport function activeFlipItem($img: JQuery<HTMLElement>): void {\n    const imageList = [];\n    imageList.push($img.attr('src'));\n    $.each($img.data('flip').split(','), function (idx, value) {\n        value = $.trim(value);\n        if (!value) {\n            return true;\n        }\n        imageList.push(value);\n    });\n    if (imageList.length <= 1) {\n        return;\n    }\n    $img.data('computed_flip_array', imageList);\n    $img.data('computed_flip_idx', 0);\n\n    $img.click(function () {\n        const arr = $img.data('computed_flip_array');\n        let idx = $img.data('computed_flip_idx');\n        idx = (idx + 1) % (arr.length);\n        $img.attr('src', arr[idx]);\n        $img.data('computed_flip_idx', idx);\n    });\n    $img.css('cursor', 'pointer');\n}\n\njQuery(function ($) {\n    $('.obj_tooltip').mouseover(function () {\n        const $objTooltip = $(this);\n        if ($objTooltip.data('setObjTooltip')) {\n            return true;\n        }\n\n        let tooltipClassText = $objTooltip.data('tooltip-class');\n        if (!tooltipClassText) {\n            tooltipClassText = '';\n        }\n        const template = '<div class=\"tooltip {0}\" role=\"tooltip\"><div class=\"arrow\"></div><div class=\"tooltip-inner\"></div></div>'\n            .format(tooltipClassText);\n\n        $objTooltip.tooltip({\n            title: function () {\n                return $.trim($(this).find('.tooltiptext').html());\n            },\n            template: template,\n            html: true\n        }).tooltip('show');\n\n        $objTooltip.data('setObjTooltip', true);\n    });\n    /*each(function(){\n        var $objTooltip = $(this);\n        \n        \n    });*/\n\n    activeFlip();\n\n    const customCSS = localStorage.getItem('sam_customCSS');\n    if (customCSS) {\n        const $style = $('<style type=\"text/css\"></style>');\n        $style.text(customCSS);\n        $style.appendTo($('head'));\n    }\n});\n\n\nexport function errUnknown(): void {\n    alert('작업을 실패했습니다.');\n}\n\n\n\nexport function errUnknownToast(): void {\n    jQuery.toast({\n        title: '에러!',\n        content: '작업을 실패했습니다.',\n        type: 'danger',\n        delay: 5000\n    });\n}\n\nexport function quickReject<T>(errMsg: string): JQuery.Promise<T> {\n    if (errMsg === undefined) {\n        errMsg = '작업을 실패했습니다.';\n    }\n    const deferred = $.Deferred();\n    void deferred.reject(errMsg);\n    return deferred.promise();\n}\n\nexport function nl2br(text: string): string {\n    return text.replace(/\\n/g, \"<br>\");\n}\n/*\nfunction br2nl (text) {   \n    return text.replace(/<\\s*\\/?br\\s*[\\/]?>/gi, '\\n');\n}\n*/\n\nexport function getNpcColor(npcType: number): 'cyan' | 'skyblue' | null {\n    if (npcType >= 2) {\n        return 'cyan';\n    }\n    if (npcType == 1) {\n        return 'skyblue';\n    }\n    return null;\n}\n\nexport function initTooltip($obj: JQuery<HTMLElement>): void {\n    if ($obj === undefined) {\n        $obj = $('.obj_tooltip');\n    } else if (!$obj.hasClass('obj_tooltip')) {\n        $obj = $obj.find('.obj_tooltip');\n    }\n    console.log($obj);\n\n    $obj.each(function () {\n        const $target = $(this);\n\n        if ($target.data('installHandler')) {\n            return;\n        }\n        $target.data('installHandler', true);\n\n        $target.mouseover(function () {\n            const $objTooltip = $(this);\n            if ($objTooltip.data('setObjTooltip')) {\n                return;\n            }\n\n            let tooltipClassText = $objTooltip.data('tooltip-class');\n            if (!tooltipClassText) {\n                tooltipClassText = '';\n            }\n            const template = '<div class=\"tooltip {0}\" role=\"tooltip\"><div class=\"arrow\"></div><div class=\"tooltip-inner\"></div></div>'\n                .format(tooltipClassText);\n\n            $objTooltip.tooltip({\n                title: function () {\n                    return $.trim($(this).find('.tooltiptext').html());\n                },\n                template: template,\n                html: true\n            }).tooltip('show');\n\n            $objTooltip.data('setObjTooltip', true);\n        });\n    });\n}\n\ndeclare global {\n    interface Window {\n        /** @deprecated Module 사용할 것 */\n        escapeHtml: typeof escapeHtml;\n        /** @deprecated Module 사용할 것 */\n        isInt: typeof isInt;\n        /** @deprecated Module 사용할 것 */\n        mb_strwidth: typeof mb_strwidth;\n        /** @deprecated Module 사용할 것 */\n        mb_strimwidth: typeof mb_strimwidth;\n        /** @deprecated Module 사용할 것 */\n        convertDictById: typeof convertDictById;\n        /** @deprecated Module 사용할 것 */\n        convertSet: typeof convertSet;\n        /** @deprecated Module 사용할 것 */\n        hexToRgb: typeof hexToRgb;\n        /** @deprecated Module 사용할 것 */\n        isBrightColor: typeof isBrightColor;\n        /** @deprecated Module 사용할 것 */\n        convColorValue: typeof convColorValue;\n        /** @deprecated Module 사용할 것 */\n        numberWithCommas: typeof numberWithCommas;\n        /** @deprecated Module 사용할 것 */\n        linkifyStrWithOpt: typeof linkifyStrWithOpt;\n        /** @deprecated Module 사용할 것 */\n        TemplateEngine: typeof TemplateEngine;\n        /** @deprecated Module 사용할 것 */\n        getIconPath: typeof getIconPath;\n        /** @deprecated Module 사용할 것 */\n        activeFlip: typeof activeFlip;\n        /** @deprecated Module 사용할 것 */\n        combineObject: typeof combineObject;\n        /** @deprecated Module 사용할 것 */\n        combineArray: typeof combineArray;\n        /** @deprecated Module 사용할 것 */\n        activeFlipItem: typeof activeFlipItem;\n        /** @deprecated Module 사용할 것 */\n        errUnknown: typeof errUnknown;\n        /** @deprecated Module 사용할 것 */\n        errUnknownToast: typeof errUnknownToast;\n        /** @deprecated Module 사용할 것 */\n        quickReject: typeof quickReject;\n        /** @deprecated Module 사용할 것 */\n        nl2br: typeof nl2br;\n        /** @deprecated Module 사용할 것 */\n        getNpcColor: typeof getNpcColor;\n        /** @deprecated Module 사용할 것 */\n        initTooltip: typeof initTooltip;\n    }\n}\n\nwindow.escapeHtml = escapeHtml;\nwindow.isInt = isInt;\nwindow.mb_strwidth = mb_strwidth;\nwindow.mb_strimwidth = mb_strimwidth;\nwindow.convertDictById = convertDictById;\nwindow.convertSet = convertSet;\nwindow.hexToRgb = hexToRgb;\nwindow.isBrightColor = isBrightColor;\nwindow.convColorValue = convColorValue;\nwindow.numberWithCommas = numberWithCommas;\nwindow.linkifyStrWithOpt = linkifyStrWithOpt;\nwindow.TemplateEngine = TemplateEngine;\nwindow.getIconPath = getIconPath;\nwindow.activeFlip = activeFlip;\nwindow.combineObject = combineObject;\nwindow.combineArray = combineArray;\nwindow.activeFlipItem = activeFlipItem;\nwindow.errUnknown = errUnknown;\nwindow.errUnknownToast = errUnknownToast;\nwindow.quickReject = quickReject;\nwindow.nl2br = nl2br;\nwindow.getNpcColor = getNpcColor;\nwindow.initTooltip = initTooltip;"],"names":["NotNullExpected","message","this","name","Error","entityMap","escapeHtml","string","String","replace","s","mb_strwidth","str","l","length","i","c","charCodeAt","hexToRgb","hex","result","exec","r","parseInt","g","b","linkifyStrWithOpt","text","window","linkifyStr","activeFlip","$obj","undefined","$","find","each","activeFlipItem","combineObject","item","columnList","newItem","columnIdx","$img","imageList","push","attr","data","split","idx","value","trim","click","arr","css","prototype","format","args","match","number","jQuery","mouseover","$objTooltip","tooltipClassText","template","tooltip","title","html","customCSS","localStorage","getItem","$style","appendTo","isInt","n","mb_strimwidth","start","width","trimmarker","trimmakerWidth","trimmedLength","trimmedStr","charAt","charWidth","next","nextWidth","join","convertDictById","Object","values","v","id","convertSet","isBrightColor","color","cv","unwrap","convColorValue","substr","toUpperCase","Set","has","numberWithCommas","x","toString","TemplateEngine","options","re","reExp","cursor","add","line","js","code","e","slice","index","Function","apply","err","console","error","getIconPath","imgsvr","picture","pathConfig","root","sharedIcon","combineArray","array","keys","key","errUnknown","alert","errUnknownToast","toast","content","type","delay","quickReject","errMsg","deferred","Deferred","reject","promise","nl2br","getNpcColor","npcType","initTooltip","hasClass","log","$target"],"sourceRoot":""}